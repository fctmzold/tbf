name: Release

permissions:
    contents: write

on:
    # 1. Automatic trigger: Runs when a tag like v1.2.3 is pushed
    push:
        tags:
            - "v[0-9]+.*"

    # 2. Manual trigger: Allows running this workflow from the Actions tab
    workflow_dispatch:

jobs:
    # Job to create a DRAFT release. This prevents a published release
    # from appearing before all assets are built and uploaded.
    create-release:
        runs-on: ubuntu-latest
        steps:
            - name: Create Draft Release
              id: create_release
              uses: taiki-e/create-gh-release-action@v1
              with:
                  # (Optional) Create a release from the main branch
                  branch: main
                  # Create a draft release. We will publish it only after all assets are successfully uploaded.
                  draft: true
                  # Automatically generate release notes from pull requests and commits.
                  generate_release_notes: true
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Job to build and upload binaries for multiple platforms
    upload-assets:
        # This job MUST wait for the draft release to be created first
        needs: create-release
        strategy:
            matrix:
                include:
                    - target: aarch64-linux-android
                      os: ubuntu-latest
                    - target: aarch64-unknown-linux-gnu
                      os: ubuntu-latest
                    - target: aarch64-apple-darwin
                      os: macos-latest
                    - target: x86_64-unknown-linux-gnu
                      os: ubuntu-latest
                    - target: x86_64-apple-darwin
                      os: macos-latest
                    - target: x86_64-pc-windows-gnu
                      os: windows-latest
        runs-on: ${{ matrix.os }}
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            # Install the MinGW toolchain, which is required for the windows-gnu target.
            # This step only runs on the Windows runner.
            - name: Install MinGW for Windows GNU target
              if: runner.os == 'Windows'
              run: choco install mingw --no-progress

            - name: Install Rust toolchain
              uses: dtolnay/rust-toolchain@stable
              with:
                  toolchain: stable
                  targets: ${{ matrix.target }}

            - name: Cache Cargo dependencies
              uses: actions/cache@v4
              with:
                  path: |
                      ~/.cargo/bin/
                      ~/.cargo/registry/index/
                      ~/.cargo/registry/cache/
                      ~/.cargo/git/db/
                      target/
                  key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
                  restore-keys: |
                      ${{ runner.os }}-cargo-${{ matrix.target }}-

            - name: Build and upload Rust binary
              uses: taiki-e/upload-rust-binary-action@v1
              with:
                  # (required) Binary name
                  bin: tbf
                  # (optional) Files to include in the archive
                  include: LICENSE,README.md
                  # (required) Target triple for cross-compilation
                  target: ${{ matrix.target }}
                  # Use a consistent archive name format
                  archive: $bin-$tag-$target
              env:
                  # (required) GitHub token for uploading assets
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # This job runs ONLY after all 'upload-assets' jobs have succeeded.
    # It marks the draft release as a final, published release.
    publish-release:
        runs-on: ubuntu-latest
        # It depends on both the creation and the successful upload of all assets
        needs: [create-release, upload-assets]
        steps:
            - name: Publish Release
              uses: taiki-e/create-gh-release-action@v1
              with:
                  # Use the tag name from the event that triggered the workflow
                  tag: ${{ github.ref_name }}
                  # Set draft to false to publish the release
                  draft: false
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
