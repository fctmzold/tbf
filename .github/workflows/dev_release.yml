name: Development Release

permissions:
    contents: write
    packages: write
    pull-requests: read

on:
    push:
        branches:
            - main

jobs:
    create-dev-release:
        runs-on: ubuntu-latest
        outputs:
            commit_hash: ${{ steps.commit.outputs.short }}
        steps:
            - name: Clean up older development releases
              uses: dev-drprasad/delete-older-releases@v0.2.0
              with:
                  keep_latest: 1
                  delete_tags: true
                  delete_tag_pattern: dev+
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            - name: Get current date and commit hash
              id: commit
              uses: pr-mpt/actions-commit-hash@v1
            - name: Get current time
              id: date
              run: echo "date_utc=$(TZ='UTC' date +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT
            - name: Create Pre-Release
              uses: "marvinpinto/action-automatic-releases@latest"
              with:
                  repo_token: ${{ secrets.GITHUB_TOKEN }}
                  automatic_release_tag: dev+${{ steps.commit.outputs.short }}
                  prerelease: true
                  title: "Development Build - ${{ steps.date.outputs.date_utc }} - dev+${{ steps.commit.outputs.short }}"

    upload-assets:
        needs: create-dev-release
        strategy:
            matrix:
                include:
                    - target: aarch64-linux-android
                      os: ubuntu-latest
                    - target: aarch64-unknown-linux-gnu
                      os: ubuntu-latest
                    - target: aarch64-apple-darwin
                      os: macos-latest
                    - target: x86_64-unknown-linux-gnu
                      os: ubuntu-latest
                    - target: x86_64-apple-darwin
                      os: macos-latest
                    - target: x86_64-pc-windows-gnu
                      os: windows-latest
        runs-on: ${{ matrix.os }}
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Install MinGW for Windows GNU target
              if: runner.os == 'Windows'
              run: choco install mingw --no-progress

            - name: Install Android NDK for Android target
              if: matrix.target == 'aarch64-linux-android'
              uses: nttld/setup-ndk@v1
              with:
                  ndk-version: r25b

            - name: Install Rust toolchain
              uses: dtolnay/rust-toolchain@stable
              with:
                  toolchain: stable
                  targets: ${{ matrix.target }}

            - name: Configure Cargo for Android
              if: matrix.target == 'aarch64-linux-android'
              run: |
                  mkdir -p .cargo
                  echo '[target.aarch64-linux-android]' >> .cargo/config.toml
                  echo 'linker = "${{ env.ANDROID_NDK_LATEST_HOME }}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android29-clang"' >> .cargo/config.toml
                  echo 'ar = "${{ env.ANDROID_NDK_LATEST_HOME }}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android-ar"' >> .cargo/config.toml

            - name: Cache Cargo dependencies
              uses: actions/cache@v4
              with:
                  path: |
                      ~/.cargo/bin/
                      ~/.cargo/registry/index/
                      ~/.cargo/registry/cache/
                      ~/.cargo/git/db/
                      target/
                  key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
                  restore-keys: |
                      ${{ runner.os }}-cargo-${{ matrix.target }}-

            - name: Build and upload Rust binary
              uses: taiki-e/upload-rust-binary-action@v1
              with:
                  ref: refs/tags/dev+${{ needs.create-dev-release.outputs.commit_hash }}
                  bin: tbf
                  include: LICENSE,README.md
                  target: ${{ matrix.target }}
                  archive: $bin-$tag-$target
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
